// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"admin/internal/api"
	"admin/internal/app"
	"admin/internal/crontab"
	"admin/internal/grpcclient"
	"admin/internal/grpcserver"
	"admin/internal/repository"
	"admin/internal/service"
	"admin/pkg/application"
	"admin/pkg/config"
	"admin/pkg/cron"
	"admin/pkg/database/es"
	"admin/pkg/database/mongo"
	"admin/pkg/database/postgres"
	"admin/pkg/database/redis"
	"admin/pkg/logger"
	"admin/pkg/trace"
	"admin/pkg/transport/grpc"
	"admin/pkg/transport/http"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(cf string) (*application.Application, error) {
	viper, err2 := config.New(cf)
	if err2 != nil {
		return nil, err
	}
	options, err2 := logger.NewOptions(viper)
	if err2 != nil {
		return nil, err
	}
	zapLogger, err2 := logger.New(options)
	if err2 != nil {
		return nil, err
	}
	appOptions, err2 := app.NewOptions(viper, zapLogger)
	if err2 != nil {
		return nil, err
	}
	httpOptions, err2 := http.NewOptions(viper, zapLogger)
	if err2 != nil {
		return nil, err
	}
	redisOptions, err2 := redis.NewOptions(viper, zapLogger)
	if err2 != nil {
		return nil, err
	}
	redisDB, err2 := redis.New(redisOptions)
	if err2 != nil {
		return nil, err
	}
	postgresOptions, err2 := postgres.NewOptions(viper, zapLogger)
	if err2 != nil {
		return nil, err
	}
	db, err2 := postgres.New(postgresOptions)
	if err2 != nil {
		return nil, err
	}
	esOptions, err2 := es.NewOptions(viper, zapLogger)
	if err2 != nil {
		return nil, err
	}
	client, err2 := es.New(esOptions)
	if err2 != nil {
		return nil, err
	}
	mongoOptions, err2 := mongo.NewOptions(viper, zapLogger)
	if err2 != nil {
		return nil, err
	}
	mongoDB, err2 := mongo.New(mongoOptions)
	if err2 != nil {
		return nil, err
	}
	repositoryRepository := repository.NewRepository(zapLogger, db, redisDB, client, mongoDB)
	traceOptions, err2 := trace.NewOptions(viper, zapLogger)
	if err2 != nil {
		return nil, err
	}
	tracerProvider, err2 := trace.New(traceOptions)
	if err2 != nil {
		return nil, err
	}
	clientOptions, err2 := grpc.NewClientOptions(viper, zapLogger, tracerProvider)
	if err2 != nil {
		return nil, err
	}
	grpcClient, err2 := grpc.NewClient(clientOptions)
	if err2 != nil {
		return nil, err
	}
	blogServiceClient, err2 := grpcclient.NewBlogClient(grpcClient)
	if err2 != nil {
		return nil, err
	}
	serviceService := service.NewService(zapLogger, repositoryRepository, blogServiceClient)
	controller := api.NewController(zapLogger, viper, redisDB, serviceService)
	initControllers := api.CreateInitControllersFn(controller)
	engine := http.NewRouter(httpOptions, zapLogger, initControllers, tracerProvider)
	httpServer, err2 := http.New(httpOptions, zapLogger, engine)
	if err2 != nil {
		return nil, err
	}
	serverOptions, err2 := grpc.NewServerOptions(viper, zapLogger)
	if err2 != nil {
		return nil, err
	}
	grpcServer, err2 := grpcserver.NewGrpcServer(zapLogger, serviceService)
	if err2 != nil {
		return nil, err
	}
	initServers := grpcserver.CreateInitGrpcServersFn(grpcServer)
	server2, err2 := grpc.NewServer(serverOptions, zapLogger, initServers, tracerProvider)
	if err2 != nil {
		return nil, err
	}
	cronOptions, err2 := cron.NewOptions(viper, zapLogger)
	if err2 != nil {
		return nil, err
	}
	defaultCronJobService := crontab.NewDefaultCronJobService(zapLogger, viper, redisDB, client, db, mongoDB)
	cronInitServers := crontab.CreateInitServersFn(defaultCronJobService)
	cronServer, err2 := cron.New(cronOptions, zapLogger, redisDB, cronInitServers)
	if err2 != nil {
		return nil, err
	}
	applicationApplication, err2 := app.NewApp(appOptions, zapLogger, httpServer, server2, cronServer)
	if err2 != nil {
		return nil, err
	}
	return applicationApplication, nil
}

// wire.go:

var providerSet = wire.NewSet(logger.ProviderSet, config.ProviderSet, mongo.ProviderSet, postgres.ProviderSet, es.ProviderSet, redis.ProviderSet, trace.ProviderSet, repository.ProviderSet, service.ProviderSet, grpcclient.ProviderSet, grpcserver.ProviderSet, http.ProviderSet, grpc.ProviderSet, cron.ProviderSet, crontab.ProviderSet, api.ProviderSet, app.ProviderSet)
