// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package crontab

import (
	"blog/pkg/config"
	"blog/pkg/cron"
	"blog/pkg/database/es"
	"blog/pkg/database/mongo"
	"blog/pkg/database/postgres"
	"blog/pkg/database/redis"
	"blog/pkg/logger"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateDefaultCronJobService(cf string) (*DefaultCronJobService, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := logger.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	zapLogger, err := logger.New(options)
	if err != nil {
		return nil, err
	}
	redisOptions, err := redis.NewOptions(viper, zapLogger)
	if err != nil {
		return nil, err
	}
	redisDB, err := redis.New(redisOptions)
	if err != nil {
		return nil, err
	}
	esOptions, err := es.NewOptions(viper, zapLogger)
	if err != nil {
		return nil, err
	}
	client, err := es.New(esOptions)
	if err != nil {
		return nil, err
	}
	postgresOptions, err := postgres.NewOptions(viper, zapLogger)
	if err != nil {
		return nil, err
	}
	db, err := postgres.New(postgresOptions)
	if err != nil {
		return nil, err
	}
	mongoOptions, err := mongo.NewOptions(viper, zapLogger)
	if err != nil {
		return nil, err
	}
	mongoDB, err := mongo.New(mongoOptions)
	if err != nil {
		return nil, err
	}
	defaultCronJobService := NewDefaultCronJobService(zapLogger, viper, redisDB, client, db, mongoDB)
	return defaultCronJobService, nil
}

// wire.go:

var testProviderSet = wire.NewSet(logger.ProviderSet, config.ProviderSet, redis.ProviderSet, es.ProviderSet, postgres.ProviderSet, mongo.ProviderSet, cron.ProviderSet, ProviderSet)
